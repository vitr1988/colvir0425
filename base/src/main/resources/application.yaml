spring:
  application:
    name: &applicationName base-colvir
#  hazelcast:
#    config: classpath:hazelcast-client.yaml
  cache:
#    caffeine:
#      spec: expireAfterWrite=5m
#    type: caffeine
#    type: hazelcast
    type: jcache
    jcache:
      config: classpath:ehcache.xml
  kafka:
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: *applicationName
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.colvir.webinar18.dto"
      auto-offset-reset: earliest

  jms:
    listener:
      min-concurrency: 1
      max-concurrency: 10
  activemq:
    broker-url: tcp://localhost:61616
    user: admin
    password: admin
  main.banner-mode: off
  datasource:
    url: jdbc:postgresql://localhost:5432/colvir
    username: colvir
    password: colvir
    driver-class-name: org.postgresql.Driver
  jpa:
    open-in-view: false
    generate-ddl: false
#    show-sql: true
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        cache.use_query_cache: true
#        format_sql: true
        javax.cache:
          provider: org.ehcache.jsr107.EhcacheCachingProvider
          uri: ehcache.xml
          cache:
            use_second_level_cache: true
            region.factory_class: jcache
#            region.factory_class: org.hibernate.cache.jcache.internal.JCacheRegionFactory
  liquibase:
    change-log: 'classpath:db-migrations/changeLog.xml'

app:
  version: 1.0.0
  digit: 123
  jwt:
    secret: theStrongestPasswordAllOverTheWorld
  context:
    file: /spring-context.xml

server:
  port: 8090
  servlet:
    context-path: /app

springdoc:
  swagger-ui:
    path: /swagger-ui.html
  packages-to-scan: com.colvir.webinar5

logging:
  config: classpath:logback.xml

management:
  endpoints.web.exposure.include: 'prometheus, metrics, info, health, env, refresh, beans, mappings'
#  endpoints.web.exposure.include: '*'
  endpoint:
    health:
      show-details: ALWAYS
    metrics:
      access: read_only
    prometheus:
      access: read_only
  prometheus:
    metrics:
      export:
        enabled: true
